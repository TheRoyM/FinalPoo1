package co.edu.unac.poo1.unidad1;import co.edu.unac.poo1.alimentos.Sabores;import co.edu.unac.poo1.bebidas.*;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.*;import java.util.stream.Stream;public class Unidad1 {    private static final String RUTA_ARCHIVO_CAFES = "C:\\Users\\RoyMR\\Documents\\FinalPoo1RoysmanJunio7\\src\\co\\edu\\unac\\poo1\\bebidas\\cafe.txt";    public static void MostrarPlano(){        List<CafeMoka> listaCafes = leerArchivoPlanoCafes();        listaCafes.sort(Comparator.comparing(CafeMoka::getSabor));        for (CafeMoka cafeMoka: listaCafes){            System.out.println(cafeMoka);            cafeMoka.verInformacion();        }    }    public static List<CafeMoka> leerArchivoPlanoCafes() {        Stream<String> lines = null;        Path pathArchvioPlano = Paths.get(RUTA_ARCHIVO_CAFES);        ArrayList<CafeMoka> listaCafes = new ArrayList<>();        try {            lines = Files.lines(pathArchvioPlano);            List<String> datos = lines.toList();            for (String dato : datos) {                CafeMoka nuevoCafe = CafeMoka.procesarLineaArchivoPlano(dato);                listaCafes.add(nuevoCafe);            }        } catch (IOException ioex){            System.err.println("Error de IO al leer el archivo plano " + ioex.getMessage());        } finally {            assert lines != null;            lines.close();        }        return listaCafes;    }    public static List<Bebida> listaBebidas() {        Map<String, Bebida> listaMapa = new TreeMap<>();        Cerveza cerveza1 = new Cerveza("AGUILA", 45F, 58965F, "a1", Sabores.amargo);        Cerveza cerveza2 = new Cerveza("Corona", 55F, 556365F, "a2", Sabores.amargo);        Cerveza cerveza3 = new Cerveza("Reeds", 35F, 58765F, "a3", Sabores.amargo);        CafeMoka cafeMoka1 = new CafeMoka("Juan", 78F, 1524F, "w1", 7, 2, "Bourbon", "Suave");        CafeMoka cafeMoka2 = new CafeMoka("colca", 78F, 17824F, "w2", 7, 2, "Arabigon", "Estandar");        CafeMoka cafeMoka3 = new CafeMoka("sello", 78F, 14784F, "w3", 7, 2, "Bourbon", "Suave");        Milo milo1 = new Milo("Choko", 5F, 343245F, "q1", 5, 4, "Arabigon", "", 34F);        Milo milo2 = new Milo("Listoxd", 5F, 231234F, "q2", 5, 4, "Arabigon", "Dulce", 39F);        listaMapa.put(cerveza1.getNombre(), cerveza1);        listaMapa.put(cerveza2.getNombre(), cerveza2);        listaMapa.put(cerveza3.getNombre(), cerveza3);        listaMapa.put(cafeMoka1.getNombre(), cafeMoka1);        listaMapa.put(cafeMoka2.getNombre(), cafeMoka2);        listaMapa.put(cafeMoka3.getNombre(), cafeMoka3);        listaMapa.put(milo1.getNombre(), milo1);        listaMapa.put(milo2.getNombre(), milo2);        List<Bebida> listaMadurado = new LinkedList<>(listaMapa.values());        for (Bebida bebida : listaMadurado) {            bebida.verInformacion2();        }        return listaMadurado;        //Agregar Bebidas    }    public static void contarCervesas (){        List<Bebida> listaBebida = listaBebidas();        int contarCerveza=0;        for(int i=0;i<listaBebida.size();i++){            for(int j=i+1; j<listaBebida.size(); j++){                if(listaBebida.get(i).equals(listaBebida.get(j))){                    contarCerveza+=2;                }            }        }        System.out.println("El numero de cervezas iguales en la lista es de "+ contarCerveza);    }}